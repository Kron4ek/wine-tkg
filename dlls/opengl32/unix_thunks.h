/* Automatically generated from http://www.opengl.org/registry files; DO NOT EDIT! */

typedef ULONG PTR32;

extern BOOL wrap_wglCopyContext( TEB *teb, HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask );
extern HGLRC wrap_wglCreateContext( TEB *teb, HDC hDc );
extern BOOL wrap_wglDeleteContext( TEB *teb, HGLRC oldContext );
extern PROC wrap_wglGetProcAddress( TEB *teb, LPCSTR lpszProc );
extern BOOL wrap_wglMakeCurrent( TEB *teb, HDC hDc, HGLRC newContext );
extern BOOL wrap_wglShareLists( TEB *teb, HGLRC hrcSrvShare, HGLRC hrcSrvSource );
extern BOOL wrap_wglSwapBuffers( TEB *teb, HDC hdc );
extern void wrap_glClear( TEB *teb, GLbitfield mask );
extern void wrap_glDrawBuffer( TEB *teb, GLenum buf );
extern void wrap_glDrawPixels( TEB *teb, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
extern void wrap_glFinish( TEB *teb );
extern void wrap_glFlush( TEB *teb );
extern void wrap_glGetBooleanv( TEB *teb, GLenum pname, GLboolean *data );
extern void wrap_glGetDoublev( TEB *teb, GLenum pname, GLdouble *data );
extern void wrap_glGetFloatv( TEB *teb, GLenum pname, GLfloat *data );
extern void wrap_glGetIntegerv( TEB *teb, GLenum pname, GLint *data );
extern const GLubyte * wrap_glGetString( TEB *teb, GLenum name );
extern void wrap_glReadBuffer( TEB *teb, GLenum src );
extern void wrap_glReadPixels( TEB *teb, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels );
extern void wrap_glViewport( TEB *teb, GLint x, GLint y, GLsizei width, GLsizei height );
extern void wrap_glDebugMessageCallback( TEB *teb, GLDEBUGPROC callback, const void *userParam );
extern void wrap_glDebugMessageCallbackAMD( TEB *teb, GLDEBUGPROCAMD callback, void *userParam );
extern void wrap_glDebugMessageCallbackARB( TEB *teb, GLDEBUGPROCARB callback, const void *userParam );
extern void wrap_glDrawBuffers( TEB *teb, GLsizei n, const GLenum *bufs );
extern void wrap_glFramebufferDrawBufferEXT( TEB *teb, GLuint framebuffer, GLenum mode );
extern void wrap_glFramebufferDrawBuffersEXT( TEB *teb, GLuint framebuffer, GLsizei n, const GLenum *bufs );
extern void wrap_glFramebufferReadBufferEXT( TEB *teb, GLuint framebuffer, GLenum mode );
extern void wrap_glGetFramebufferParameterivEXT( TEB *teb, GLuint framebuffer, GLenum pname, GLint *params );
extern void wrap_glGetInteger64v( TEB *teb, GLenum pname, GLint64 *data );
extern const GLubyte * wrap_glGetStringi( TEB *teb, GLenum name, GLuint index );
extern void wrap_glNamedFramebufferDrawBuffer( TEB *teb, GLuint framebuffer, GLenum buf );
extern void wrap_glNamedFramebufferDrawBuffers( TEB *teb, GLuint framebuffer, GLsizei n, const GLenum *bufs );
extern void wrap_glNamedFramebufferReadBuffer( TEB *teb, GLuint framebuffer, GLenum src );
extern BOOL wrap_wglBindTexImageARB( TEB *teb, HPBUFFERARB hPbuffer, int iBuffer );
extern HGLRC wrap_wglCreateContextAttribsARB( TEB *teb, HDC hDC, HGLRC hShareContext, const int *attribList );
extern HPBUFFERARB wrap_wglCreatePbufferARB( TEB *teb, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList );
extern BOOL wrap_wglDestroyPbufferARB( TEB *teb, HPBUFFERARB hPbuffer );
extern HDC wrap_wglGetPbufferDCARB( TEB *teb, HPBUFFERARB hPbuffer );
extern BOOL wrap_wglMakeContextCurrentARB( TEB *teb, HDC hDrawDC, HDC hReadDC, HGLRC hglrc );
extern BOOL wrap_wglQueryPbufferARB( TEB *teb, HPBUFFERARB hPbuffer, int iAttribute, int *piValue );
extern int wrap_wglReleasePbufferDCARB( TEB *teb, HPBUFFERARB hPbuffer, HDC hDC );
extern BOOL wrap_wglReleaseTexImageARB( TEB *teb, HPBUFFERARB hPbuffer, int iBuffer );
extern BOOL wrap_wglSetPbufferAttribARB( TEB *teb, HPBUFFERARB hPbuffer, const int *piAttribList );

#ifdef _WIN64
extern GLenum wow64_glClientWaitSync( TEB *teb, GLsync sync, GLbitfield flags, GLuint64 timeout );
extern void wow64_glDeleteBuffers( TEB *teb, GLsizei n, const GLuint *buffers );
extern void wow64_glDeleteSync( TEB *teb, GLsync sync );
extern GLsync wow64_glFenceSync( TEB *teb, GLenum condition, GLbitfield flags );
extern void wow64_glGetBufferPointerv( TEB *teb, GLenum target, GLenum pname, PTR32 *params );
extern void wow64_glGetBufferPointervARB( TEB *teb, GLenum target, GLenum pname, PTR32 *params );
extern void wow64_glGetNamedBufferPointerv( TEB *teb, GLuint buffer, GLenum pname, PTR32 *params );
extern void wow64_glGetNamedBufferPointervEXT( TEB *teb, GLuint buffer, GLenum pname, PTR32 *params );
extern void wow64_glGetSynciv( TEB *teb, GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
extern GLboolean wow64_glIsSync( TEB *teb, GLsync sync );
extern PTR32 wow64_glMapBuffer( TEB *teb, GLenum target, GLenum access );
extern PTR32 wow64_glMapBufferARB( TEB *teb, GLenum target, GLenum access );
extern PTR32 wow64_glMapBufferRange( TEB *teb, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access );
extern PTR32 wow64_glMapNamedBuffer( TEB *teb, GLuint buffer, GLenum access );
extern PTR32 wow64_glMapNamedBufferEXT( TEB *teb, GLuint buffer, GLenum access );
extern PTR32 wow64_glMapNamedBufferRange( TEB *teb, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
extern PTR32 wow64_glMapNamedBufferRangeEXT( TEB *teb, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
extern GLboolean wow64_glUnmapBuffer( TEB *teb, GLenum target );
extern GLboolean wow64_glUnmapBufferARB( TEB *teb, GLenum target );
extern GLboolean wow64_glUnmapNamedBuffer( TEB *teb, GLuint buffer );
extern GLboolean wow64_glUnmapNamedBufferEXT( TEB *teb, GLuint buffer );
extern void wow64_glWaitSync( TEB *teb, GLsync sync, GLbitfield flags, GLuint64 timeout );
#endif
